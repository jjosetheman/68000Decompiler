00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 11/27/2014 3:51:13 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : JSR CODE
00000000                             3  * Written by : Brad Minogue/Norman Hansen
00000000                             4  * Date       : 11/19/2014
00000000                             5  * Description: JSR Code for OP/EA
00000000                             6  *-----------------------------------------------------------
00000000  =00000002                  7  MAnP     EQU     $2    ;%010    * (An)
00000000  =00000005                  8  Md16An   EQU     $5    ;%101    * (d16,An)
00000000  =00000006                  9  Md8AnXn  EQU     $6    ;%110    * (d8,An,Xn)
00000000  =00000007                 10  MxxxW    EQU     $7    ;%111    * (xxx).W
00000000  =00000007                 11  MxxxL    EQU     $7    ;%111    * (xxx).L
00000000  =00000007                 12  Md16PC   EQU     $7    ;%111    * (d16,PC)
00000000  =00000007                 13  Md8PCXn  EQU     $7    ;%111    * (d8,PC,Xn)
00000000                            14  
00001000                            15      ORG    $1000
00001000                            16  START: 
00001000  2439 000010A6             17      MOVE.L (SAMPLE_INPUT),D2    ;Load up sample input, 4E91 so EA 010 001 or do 
00001006  2202                      18      MOVE.L D2,D1                ;copy the data so we don't ruin it
00001008  EC49                      19      LSR #6,D1                   ;erase the EA
0000100A  B2B9 000010AA             20      CMP.L JSR_VALUE, D1         ;see if we are JSR
00001010  6600 0090                 21      BNE END_SEG                 ;if not end this segment
00001014                            22      
00001014  43F9 000010AE             23      LEA JSR_TEXT,A1             ;print out JSR
0000101A  103C 000E                 24      MOVE.B #14, D0
0000101E  4E4F                      25      TRAP #15
00001020                            26      
00001020  43F9 000010B2             27      LEA EA_TEXT,A1              ;this is where we hand off to EA
00001026  103C 000E                 28      MOVE.B #14,D0
0000102A  4E4F                      29      TRAP #15   
0000102C                            30      
0000102C                            31  GETEA:    
0000102C  2202                      32      MOVE.L D2,D1                ; this is for detecting the mode starts as 1001 0001 WANT 010
0000102E  E149                      33      LSL #8,D1                   ; Remove starting address
00001030  E349                      34      LSL #1,D1                   ; Remove offset so then it's 0010 0010
00001032  E049                      35      LSR #8,D1                   ; Put back into place
00001034  E849                      36      LSR #4,D1                   ; Remove register so now it's 0010
00001036  B23C 0002                 37      CMP.B #MAnP,D1
0000103A  6700 0010                 38      BEQ EA_AnP
0000103E                            39      
0000103E                            40  GETREG:
0000103E  2202                      41      MOVE.L D2,D1                ; this is for detecting the register starts as 1001 0001 WANT 001
00001040  E149                      42      LSL #8,D1                   ; Remove starting address
00001042  EB49                      43      LSL #5,D1                   ; Remove offset so then it's 0010 0010
00001044  E049                      44      LSR #8,D1                   ; Put back into place
00001046  EA49                      45      LSR #5,D1                   ; Remove excess so now it's 0001
00001048  6000 0058                 46      BRA END_SEG
0000104C                            47    
0000104C                            48  EA_AnP
0000104C  43F9 000010B6             49      LEA AnP_TEXT,A1
00001052  103C 000E                 50      MOVE.B #14,D0
00001056  4E4F                      51      TRAP #15
00001058  60E4                      52      BRA GETREG
0000105A                            53  
0000105A                            54  EA_D16An
0000105A  43F9 000010BC             55      LEA D16An_TEXT,A1
00001060  103C 000E                 56      MOVE.B #14,D0
00001064  4E4F                      57      TRAP #15
00001066                            58      
00001066                            59  EA_D8AnXn
00001066  43F9 000010C6             60      LEA D8AnXn_TEXT,A1
0000106C  103C 000E                 61      MOVE.B  #14,D0
00001070  4E4F                      62      TRAP #15
00001072                            63      
00001072                            64  EA_XXXXW
00001072  43F9 000010D2             65      LEA xxxxW_TEXT,A1
00001078  103C 000E                 66      MOVE.B  #14,D0
0000107C  4E4F                      67      TRAP #15
0000107E                            68      
0000107E                            69  EA_XXXXL
0000107E  43F9 000010DC             70      LEA xxxxL_TEXT,A1
00001084  103C 000E                 71      MOVE.B  #14,D0
00001088  4E4F                      72      TRAP #15
0000108A                            73      
0000108A                            74  EA_D16PC
0000108A  43F9 000010E6             75      LEA D16PC_TEXT,A1
00001090  103C 000E                 76      MOVE.B #14,D0
00001094  4E4F                      77      TRAP #15
00001096                            78      
00001096                            79  EA_D8PCXn_TEXT
00001096  43F9 000010F0             80      LEA D8PCXn_TEXT,A1
0000109C  103C 000E                 81      MOVE.B #14,D0
000010A0  4E4F                      82      TRAP #15
000010A2                            83  
000010A2                            84      
000010A2  FFFF FFFF                 85  END_SEG    SIMHALT             ; halt simulator
000010A6                            86  
000010A6= 00004E91                  87  SAMPLE_INPUT DC.L $4E91
000010AA= 0000013A                  88  JSR_VALUE DC.L $13A
000010AE= 4A 53 52 00               89  JSR_TEXT DC.B 'JSR',0
000010B2= 20 45 41 00               90  EA_TEXT DC.B ' EA',0
000010B6= 20 28 41 6E 29 00         91  AnP_TEXT DC.B ' (An)',0
000010BC= 20 28 64 31 36 2C ...     92  D16An_TEXT DC.B ' (d16,An)',0
000010C6= 20 28 64 38 2C 41 ...     93  D8AnXn_TEXT DC.B ' (d8,An,Xn)',0
000010D2= 20 28 78 78 78 78 ...     94  xxxxW_TEXT DC.B ' (xxxx).W',0
000010DC= 20 28 78 78 78 78 ...     95  xxxxL_TEXT DC.B ' (xxxx).L',0
000010E6= 20 28 64 31 36 2C ...     96  D16PC_TEXT DC.B ' (d16,PC)',0
000010F0= 20 28 64 38 2C 50 ...     97  D8PCXn_TEXT DC.B ' (d8,PC,Xn)',0
000010FC                            98  
000010FC  =00000002                 99  MAnP     EQU     %010    * (An)
000010FC  =00000005                100  Md16An   EQU     %101    * (d16,An)
000010FC  =00000006                101  Md8AnXn  EQU     %110    * (d8,An,Xn)
000010FC  =00000007                102  MxxxW    EQU     %111    * (xxx).W
000010FC  =00000007                103  MxxxL    EQU     %111    * (xxx).L
000010FC  =00000007                104  Md16PC   EQU     %111    * (d16,PC)
000010FC  =00000007                105  Md8PCXn  EQU     %111    * (d8,PC,Xn)
000010FC                           106  
000010FC                           107      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ANP_TEXT            10B6
D16AN_TEXT          10BC
D16PC_TEXT          10E6
D8ANXN_TEXT         10C6
D8PCXN_TEXT         10F0
EA_ANP              104C
EA_D16AN            105A
EA_D16PC            108A
EA_D8ANXN           1066
EA_D8PCXN_TEXT      1096
EA_TEXT             10B2
EA_XXXXL            107E
EA_XXXXW            1072
END_SEG             10A2
GETEA               102C
GETREG              103E
JSR_TEXT            10AE
JSR_VALUE           10AA
MANP                2
MD16AN              5
MD16PC              7
MD8ANXN             6
MD8PCXN             7
MXXXL               7
MXXXW               7
SAMPLE_INPUT        10A6
START               1000
XXXXL_TEXT          10DC
XXXXW_TEXT          10D2
