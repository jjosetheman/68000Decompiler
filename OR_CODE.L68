00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 11/18/2014 5:21:27 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : OR
00000000                             3  * Written by : Brad Minogue
00000000                             4  * Date       :
00000000                             5  * Description: decodes OR
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  START:                  
00001000  43F9 000010DA              9      LEA SAMPLE_INPUT, A1        ;load sample data
00001006  2211                      10      MOVE.L (A1),D1              ;move sample data to directory
00001008  2401                      11      MOVE.L D1,D2                ;Copy data
0000100A  E849                      12      LSR #4,D1                   ;Keep moving the bit over untill we get what we want only
0000100C  E849                      13      LSR #4,D1                   ;we only care about the first 4 bits so everything else
0000100E  E849                      14      LSR #4,D1                   ;is worthless
00001010  B2BC 00000008             15      CMP.L #8,D1                 ;see if we are OR
00001016  6700 0002                 16      BEQ OR_SEG                  ;start decompiling OR
0000101A                            17      
0000101A  43F9 000010DE             18  OR_SEG  LEA OR_OUT,A1           ;print OR
00001020  103C 000E                 19      MOVE.B  #14,D0                  
00001024  4E4F                      20      TRAP    #15
00001026  2202                      21      MOVE.L D2,D1                ;Copy data    
00001028  E949                      22      LSL #4, D1                  ;here we are getting rid of all didgets except
0000102A  E749                      23      LSL #3, D1                  ;the OP Mode information
0000102C  E849                      24      LSR #4, D1
0000102E  E649                      25      LSR #3, D1
00001030  E849                      26      LSR #4, D1
00001032  E449                      27      LSR #2, D1
00001034  B239 000010E2             28      CMP.B BYTE_VAL_ONE, D1      ;these two compares tell if we are a byte mode
0000103A  6700 0064                 29      BEQ BYTE_PRINT
0000103E  B239 000010E3             30      CMP.B BYTE_VAL_TWO, D1 
00001044  6700 005A                 31      BEQ BYTE_PRINT
00001048                            32      
00001048  B239 000010E6             33      CMP.B LONG_VAL_ONE, D1      ;thse two compares tell if we are in a long mode
0000104E  6700 005E                 34      BEQ LONG_PRINT
00001052  B239 000010E7             35      CMP.B LONG_VAL_TWO, D1
00001058  6700 0054                 36      BEQ LONG_PRINT
0000105C                            37      
0000105C  B239 000010E4             38      CMP.B WORD_VAL_ONE, D1      ;these two compares tell if we are in a word mode
00001062  6700 0058                 39      BEQ WORD_PRINT
00001066  B239 000010E5             40      CMP.B WORD_VAL_TWO, D1
0000106C  6700 004E                 41      BEQ WORD_PRINT
00001070  2202                      42  REG_SEG MOVE.L D2,D1            ;get back the orgional data so we can see
00001072  E949                      43      LSL #4, D1                  ;what register we are in
00001074  E749                      44      LSL #3, D1
00001076  E849                      45      LSR #4, D1
00001078  E649                      46      LSR #3, D1
0000107A  EC49                      47      LSR #6, D1
0000107C                            48      
0000107C  43F9 000010EE             49      LEA D_TEXT, A1              ;print out
00001082  103C 000E                 50      MOVE.B #14,D0
00001086  4E4F                      51      TRAP #15
00001088                            52      
00001088  48C1                      53      EXT.L   D1                   ;load up results
0000108A  103C 0003                 54      MOVE.B  #3,D0                ;loading
0000108E  4E4F                      55      TRAP    #15                  ;displaying
00001090                            56      
00001090  43F9 000010FE             57      LEA COMMA_SPACE, A1          ;set up for the effective address
00001096  103C 000E                 58      MOVE.B #14,D0
0000109A  4E4F                      59      TRAP #15
0000109C  6000 002C                 60      BRA END_STEP
000010A0  43F9 000010E8             61  BYTE_PRINT  LEA BYTE_TEXT,A1     ;print B
000010A6  103C 000E                 62      MOVE.B  #14,D0                  
000010AA  4E4F                      63      TRAP    #15
000010AC  60C2                      64      BRA REG_SEG
000010AE  43F9 000010EA             65  LONG_PRINT  LEA LONG_TEXT, A1    ;print L
000010B4  103C 000E                 66      MOVE.B #14,D0
000010B8  4E4F                      67      TRAP #15
000010BA  60B4                      68      BRA REG_SEG
000010BC  43F9 000010EC             69  WORD_PRINT  LEA WORD_TEXT, A1   ;print W
000010C2  103C 000E                 70      MOVE.B #14,D0
000010C6  4E4F                      71      TRAP #15
000010C8  60A6                      72      BRA REG_SEG
000010CA  43F9 00001101             73  END_STEP  LEA EXIT_STATEMENT, A1    ;print our end statement
000010D0  103C 000E                 74      MOVE.B #14,D0
000010D4  4E4F                      75      TRAP #15
000010D6  FFFF FFFF                 76      SIMHALT             ; halt simulator
000010DA                            77  * Put variables and constants here
000010DA= 00008040                  78  SAMPLE_INPUT DC.L $8040
000010DE= 4F 52 2E 00               79  OR_OUT DC.B 'OR.',0
000010E2= 00                        80  BYTE_VAL_ONE DC.B $0
000010E3= 04                        81  BYTE_VAL_TWO DC.B $4
000010E4= 01                        82  WORD_VAL_ONE DC.B $1
000010E5= 05                        83  WORD_VAL_TWO DC.B $5
000010E6= 02                        84  LONG_VAL_ONE DC.B $2
000010E7= 06                        85  LONG_VAL_TWO DC.B $6
000010E8= 42 00                     86  BYTE_TEXT DC.B 'B',0
000010EA= 4C 00                     87  LONG_TEXT DC.B 'L',0
000010EC= 57 00                     88  WORD_TEXT DC.B 'W',0
000010EE= 20 44 28 6F 72 20 ...     89  D_TEXT DC.B ' D(or imidiate)',0
000010FE= 2C 20 00                  90  COMMA_SPACE DC.B ', ', 0
00001101= 20 68 61 6E 64 20 ...     91  EXIT_STATEMENT DC.B ' hand off to address mode', 0
0000111B                            92      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
BYTE_PRINT          10A0
BYTE_TEXT           10E8
BYTE_VAL_ONE        10E2
BYTE_VAL_TWO        10E3
COMMA_SPACE         10FE
D_TEXT              10EE
END_STEP            10CA
EXIT_STATEMENT      1101
LONG_PRINT          10AE
LONG_TEXT           10EA
LONG_VAL_ONE        10E6
LONG_VAL_TWO        10E7
OR_OUT              10DE
OR_SEG              101A
REG_SEG             1070
SAMPLE_INPUT        10DA
START               1000
WORD_PRINT          10BC
WORD_TEXT           10EC
WORD_VAL_ONE        10E4
WORD_VAL_TWO        10E5
